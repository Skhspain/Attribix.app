generator client {
  provider = "prisma-client-js"
}

datasource db {
  // dev = sqlite (as you had). For prod you'll use schema.prod.prisma with postgresql.
  provider = "sqlite"
  url      = "file:dev.sqlite"
}

/* ============================================================
   Shopify OAuth/session (unchanged)
============================================================ */
model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

/* ============================================================
   Existing app models
============================================================ */
model TrackedItem {
  id        Int       @id @default(autoincrement())
  name      String
  status    String    @default("new")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

/**
 * NOTE: `url` is optional here because your /api.track route
 * can send `null` when only `path` is present.
 */
model TrackedEvent {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())

  eventName   String
  url         String?
  path        String?
  referrer    String?

  // Value attribution
  value       Float?
  currency    String?

  // Identity / device
  email       String?
  phone       String?
  ip          String?
  userAgent   String?

  // UTMs & click ids
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  gclid       String?
  fbclid      String?
  ttclid      String?
  msclkid     String?

  // Session link (nullable)
  sessionId   String?
  session     WebSession?      @relation(fields: [sessionId], references: [id])

  // Optional commerce context
  orderId     String?
  shop        String?

  // Products attached to event
  products    TrackedProduct[]

  @@index([createdAt])
  @@index([eventName, createdAt])
  @@index([utmSource, utmMedium, utmCampaign])
}

model TrackedProduct {
  id             Int           @id @default(autoincrement())
  trackedEventId Int
  trackedEvent   TrackedEvent  @relation(fields: [trackedEventId], references: [id], onDelete: Cascade)

  productId      String?
  productName    String
  quantity       Int
}

model TrackingSettings {
  shop    String  @id
  pixelId String
  enabled Boolean @default(false)
}

/* ============================================================
   Web sessions (for UTMs, consent, joins)
============================================================ */
model WebSession {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Identifiers
  anonId             String?
  clientId           String?
  ipHash             String?
  userAgent          String?

  // First/last touch
  firstTouchAt       DateTime?
  lastTouchAt        DateTime?

  // UTMs / click IDs
  utmSource          String?
  utmMedium          String?
  utmCampaign        String?
  utmContent         String?
  utmTerm            String?
  gclid              String?
  fbclid             String?
  ttclid             String?
  msclkid            String?

  // Consent flags
  consentAdvertising Boolean?  @default(false)
  consentMarketing   Boolean?  @default(false)

  // Relations
  events             TrackedEvent[]
  purchases          Purchase[]

  @@index([createdAt])
  @@index([utmSource, utmMedium, utmCampaign])
}

/* ============================================================
   Purchases (denormalized UTM fields for fast group-bys)
============================================================ */
model Purchase {
  id                 String      @id @default(cuid())
  createdAt          DateTime    @default(now())

  // If you sync from Shopify, keep this; otherwise remove or drop @unique.
  shopifyOrderId     String?     @unique

  totalValue         Float
  currency           String
  customerEmailHash  String?     // store SHA-256 hash if needed

  // Denormalized UTM fields
  utmSource          String?
  utmMedium          String?
  utmCampaign        String?
  gclid              String?
  fbclid             String?

  // Relations
  items              PurchaseItem[]

  sessionId          String?
  session            WebSession? @relation(fields: [sessionId], references: [id])

  @@index([createdAt])
  @@index([utmSource, utmMedium, utmCampaign])
}

model PurchaseItem {
  id           String    @id @default(cuid())
  purchaseId   String
  purchase     Purchase  @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  productId    String
  productName  String
  quantity     Int
  price        Float
  category     String?
  brand        String?

  @@index([productId])
}

/* ============================================================
   Ad spend (daily rollups)
============================================================ */
model AdSpendDaily {
  id        String   @id @default(cuid())
  date      DateTime
  platform  String   // 'meta' | 'google' | 'tiktok' | etc.
  campaign  String?
  adset     String?
  ad        String?
  spend     Float    @default(0)

  @@index([date])
  @@index([platform, date])
}
